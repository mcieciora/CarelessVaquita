def customImage

pipeline {
    agent {
        label "executor"
    }
    parameters {
        string(name: "BRANCH", defaultValue: "develop", description: "Execution branch.")
    }
    options {
        skipDefaultCheckout()
    }
    stages {
        stage ("Checkout branch") {
            steps {
                script {
                    sh "curl -OL https://raw.githubusercontent.com/mcieciora/CarelessVaquita/refs/heads/${BRANCH}/.tools_config"
                    withEnv(getToolsConfig()) {
                        withCredentials([sshUserPrivateKey(credentialsId: "agent_${NODE_NAME}", keyFileVariable: "key")]) {
                            sh 'GIT_SSH_COMMAND="ssh -i $key"'
                            git branch: params.BRANCH, url: REPO_URL
                        }
                    }
                    currentBuild.description = "Branch: ${BRANCH}"
                }
            }
        }
        stage ("Prepare test image") {
            steps {
                script {
                    withEnv(getToolsConfig()) {
                        if (params.BRANCH == "develop" || params.BRANCH == "master") {
                            sh "docker pull ${DOCKERHUB_REPO}:test_image"
                            sh "docker tag ${DOCKERHUB_REPO}:test_image test_image"
                        }
                        else {
                            sh "docker build --build-arg PYTHON_BASE_IMAGE=python:${PYTHON_VERSION}-alpine --no-cache -t test_image -f automated_tests/Dockerfile ."
                        }
                    }
                }
            }
        }
        stage("Verify dependencies") {
            steps {
                script {
                    return_value = sh(script: "docker run --rm test_image python tools/python/python_dependencies_up_to_date_verification.py", returnStdout: true).trim()
                    if (return_value.contains("Consider upgrading")) {
                        unstable(return_value)
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                withEnv(getToolsConfig()) {
                    if (params.BRANCH == "develop" || params.BRANCH == "master") {
                        sh "docker rmi ${DOCKERHUB_REPO}:test_image"
                    }
                    else {
                        sh "docker rmi test_image"
                    }
                }
                cleanWs()
            }
        }
    }
}

def getToolsConfig() {
    return readFile(".tools_config").split("\n") as List
}