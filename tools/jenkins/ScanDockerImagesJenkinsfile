pipeline {
    agent {
        label "executor"
    }
    stages {
        stage ("Get tools config") {
            steps {
                script {
                    sh "curl -OL https://raw.githubusercontent.com/mcieciora/CarelessVaquita/refs/heads/${SCRIPT_BRANCH}/.tools_config"
                }
            }
        }
        stage ("Analyze images") {
            matrix {
                axes {
                    axis {
                        name "TAG"
                        values "latest", "test_image", "merge_bot"
                    }
                }
                stages {
                    stage ("docker scout") {
                        steps {
                            script {
                                withCredentials([usernamePassword(credentialsId: "dockerhub_id", usernameVariable: "USERNAME", passwordVariable: "PASSWORD")]) {
                                    sh "docker login --username $USERNAME --password $PASSWORD"
                                    sh "chmod +x tools/shell_scripts/scan_docker_scout.sh"
                                    withEnv(getToolsConfig()) {
                                        return_value = sh(script: "tools/shell_scripts/scan_docker_scout.sh ${TAG}", returnStdout: true).trim()
                                    }
                                    if (return_value.contains("Script failed, because vulnerabilities were found.")) {
                                        unstable(return_value)
                                    }
                                }
                            }
                        }
                    }
                    stage ("trivy") {
                        steps {
                            script {
                                sh "chmod +x tools/shell_scripts/scan_docker_trivy.sh"
                                withEnv(getToolsConfig()) {
                                    return_value = sh(script: "tools/shell_scripts/scan_docker_trivy.sh ${TAG}", returnStdout: true).trim()
                                }
                                if (return_value.contains("Script failed, because vulnerabilities were found.")) {
                                    unstable(return_value)
                                }
                            }
                        }
                    }
                    stage ("dive") {
                        steps {
                            script {
                                sh "chmod +x tools/shell_scripts/scan_docker_dive.sh"
                                withEnv(getToolsConfig()) {
                                    return_value = sh(script: "tools/shell_scripts/scan_docker_dive.sh ${TAG}", returnStdout: true).trim()
                                }
                                if (return_value.contains("Script failed, because vulnerabilities were found.")) {
                                    unstable(return_value)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh "docker logout"
            archiveArtifacts artifacts: "scan_*", followSymlinks: false
            cleanWs()
        }
    }
}

def getToolsConfig() {
    return readFile(".tools_config").split("\n") as List
}